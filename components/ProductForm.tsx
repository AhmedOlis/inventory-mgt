import React, { useState, useEffect } from 'react';
import { Product, Category } from '../types';
import { Input } from './common/Input';
import { Textarea } from './common/Textarea';
import { Button } from './common/Button';
import { Select } from './common/Select';
import { ICONS } from '../constants';
import { productService } from '../services/productService';
import { categoryService } from '../services/categoryService';
import { Spinner } from './Spinner';

interface ProductFormProps {
  initialProduct?: Product | null;
  onSubmit: (product: Product) => void;
  onCancel?: () => void;
  isLoading?: boolean;
  barcodeFromScanner?: string;
}

const defaultProductState: Omit<Product, 'id'> = {
  sku: '',
  name: '',
  description: '',
  category: '',
  itemType: '',
  subcategory: '',
  quantity: 0,
  reorderLevel: 10,
  price: 0,
  imageUrl: '',
  barcode: '',
};

export const ProductForm: React.FC<ProductFormProps> = ({ initialProduct, onSubmit, onCancel, isLoading, barcodeFromScanner }) => {
  const [product, setProduct] = useState<Omit<Product, 'id'>>(defaultProductState);
  const [categories, setCategories] = useState<Category[]>([]);
  const [errors, setErrors] = useState<Partial<Record<keyof Product, string>>>({});

  useEffect(() => {
    categoryService.getCategories().then(setCategories);
  }, []);

  useEffect(() => {
    if (initialProduct) {
      setProduct(initialProduct);
    } else {
      setProduct(prev => ({
        ...defaultProductState,
        sku: productService.generateSku(), // Generate SKU for new product
        barcode: barcodeFromScanner || '',
      }));
    }
  }, [initialProduct, barcodeFromScanner]);

  useEffect(() => {
    if (barcodeFromScanner) {
      setProduct(p => ({ ...p, barcode: barcodeFromScanner }));
    }
  }, [barcodeFromScanner]);


  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setProduct(prev => ({
      ...prev,
      [name]: (name === 'quantity' || name === 'price' || name === 'reorderLevel') ? parseFloat(value) || 0 : value,
    }));
    if (errors[name as keyof Product]) {
      setErrors(prev => ({ ...prev, [name]: undefined }));
    }
  };

  const validate = (): boolean => {
    const newErrors: Partial<Record<keyof Product, string>> = {};
    if (!product.name.trim()) newErrors.name = "Name is required.";
    if (!product.sku.trim()) newErrors.sku = "SKU is required.";
    if (!product.category) newErrors.category = "Category is required.";
    if (product.quantity < 0) newErrors.quantity = "Quantity cannot be negative.";
    if (product.price < 0) newErrors.price = "Price cannot be negative.";
    if (product.reorderLevel && product.reorderLevel < 0) newErrors.reorderLevel = "Reorder level cannot be negative.";
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validate()) {
      onSubmit({ ...product, id: initialProduct?.id || '' }); // ID will be generated by service if new
    }
  };

  const categoryOptions = categories.map(cat => ({ value: cat.name, label: cat.name }));

  return (
    <form onSubmit={handleSubmit} className="space-y-6 bg-white p-8 rounded-lg shadow-md">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Input name="name" label="Product Name" value={product.name} onChange={handleChange} error={errors.name} placeholder="e.g., Wireless Mouse" required />
        <Input name="sku" label="SKU" value={product.sku} onChange={handleChange} error={errors.sku} placeholder="e.g., ELE-MOUSE-001" required />
      </div>
      
      <Textarea name="description" label="Description" value={product.description} onChange={handleChange} error={errors.description} placeholder="Detailed product description" />
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
         <Select name="category" label="Category" value={product.category} onChange={handleChange} options={categoryOptions} error={errors.category} required />
         <Input name="itemType" label="Item Type" value={product.itemType || ''} onChange={handleChange} placeholder="e.g., Computer Peripherals" />
      </div>
       <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
         <Input name="subcategory" label="Subcategory" value={product.subcategory || ''} onChange={handleChange} placeholder="e.g., Gaming Mouse" />
         <Input name="barcode" label="Barcode (UPC/EAN)" value={product.barcode || ''} onChange={handleChange} error={errors.barcode} placeholder="Scan or enter barcode" />
       </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Input name="quantity" label="Quantity" type="number" value={product.quantity.toString()} onChange={handleChange} error={errors.quantity} min="0" required />
        <Input name="reorderLevel" label="Reorder Level" type="number" value={product.reorderLevel?.toString() || '0'} onChange={handleChange} error={errors.reorderLevel} min="0" />
      </div>

       <Input name="price" label="Price" type="number" value={product.price.toString()} onChange={handleChange} error={errors.price} min="0" step="0.01" containerClassName="md:w-1/2 pr-3" required />
      
      <Input name="imageUrl" label="Image URL" value={product.imageUrl || ''} onChange={handleChange} error={errors.imageUrl} placeholder="https://example.com/image.jpg" />
      {/* Basic image preview if URL is valid */}
      {product.imageUrl && (
          <div className="mt-2">
            <img src={product.imageUrl} alt="Product Preview" className="h-32 w-auto object-contain rounded border border-gray-200"/>
          </div>
        )}
      <div className="flex justify-end space-x-3 pt-4">
        {onCancel && <Button type="button" variant="outline" onClick={onCancel} disabled={isLoading}>Cancel</Button>}
        <Button type="submit" variant="primary" disabled={isLoading} leftIcon={isLoading ? <Spinner size="sm" /> : null}>
          {isLoading ? 'Saving...' : (initialProduct ? 'Update Product' : 'Add Product')}
        </Button>
      </div>
    </form>
  );
};